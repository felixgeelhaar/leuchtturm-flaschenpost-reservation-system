name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # =============================================================================
  # CODE QUALITY AND SECURITY CHECKS
  # =============================================================================
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for SonarCloud

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint
        continue-on-error: false

      - name: Run Prettier check
        run: npm run format:check
        continue-on-error: false

      - name: Run TypeScript check
        run: npm run type-check
        continue-on-error: false

      - name: Security audit
        run: npm audit --audit-level high
        continue-on-error: true

      - name: Dependency vulnerability scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true

      - name: SAST CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, typescript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # =============================================================================
  # TESTING
  # =============================================================================
  test:
    name: Testing
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    strategy:
      matrix:
        node-version: ['18', '20']
        
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "DATABASE_URL=postgresql://postgres:test_password@localhost:5432/test_db" >> .env.test

      - name: Run unit tests
        run: npm run test:unit
        env:
          NODE_ENV: test

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test

      - name: Generate test coverage
        run: npm run test:coverage
        env:
          NODE_ENV: test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: Store test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.node-version }}
          path: |
            coverage/
            test-results/

  # =============================================================================
  # E2E TESTING
  # =============================================================================
  e2e-tests:
    name: E2E Testing
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          PUBLIC_SUPABASE_URL: ${{ secrets.TEST_SUPABASE_URL }}
          PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.TEST_SUPABASE_ANON_KEY }}

      - name: Start preview server
        run: |
          npm run preview &
          sleep 10
        env:
          NODE_ENV: production

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          NODE_ENV: test
          BASE_URL: http://localhost:4321

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            test-results/
            playwright-report/

  # =============================================================================
  # BUILD AND PERFORMANCE
  # =============================================================================
  build:
    name: Build & Performance
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [code-quality, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          PUBLIC_SUPABASE_URL: ${{ secrets.PROD_SUPABASE_URL }}
          PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.PROD_SUPABASE_ANON_KEY }}

      - name: Analyze bundle size
        run: npm run analyze
        continue-on-error: true

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lighthouserc.js'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            .netlify/

  # =============================================================================
  # SECURITY SCANNING
  # =============================================================================
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Docker security scan (if using containers)
        run: |
          # Placeholder for Docker security scanning
          echo "Docker security scanning would run here"

  # =============================================================================
  # DEPLOYMENT TO STAGING
  # =============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [build, security, e2e-tests]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging--leuchtturm-flaschenpost.netlify.app
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Deploy to Netlify (Staging)
        uses: netlify/actions/cli@master
        with:
          args: deploy --dir=dist --alias=staging
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      - name: Run smoke tests against staging
        run: npm run test:smoke
        env:
          BASE_URL: https://staging--leuchtturm-flaschenpost.netlify.app

      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          text: 'Staging deployment completed'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # =============================================================================
  # DEPLOYMENT TO PRODUCTION
  # =============================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build, security, e2e-tests]
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'release')
    environment:
      name: production
      url: https://leuchtturm-flaschenpost.netlify.app
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Pre-deployment backup
        run: |
          # Trigger backup before deployment
          curl -X POST "${{ secrets.BACKUP_WEBHOOK_URL }}" \
            -H "Authorization: Bearer ${{ secrets.BACKUP_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{"type": "pre-deployment", "trigger": "ci-cd"}'

      - name: Deploy to Netlify (Production)
        uses: netlify/actions/cli@master
        with:
          args: deploy --dir=dist --prod
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      - name: Wait for deployment
        run: sleep 30

      - name: Run production smoke tests
        run: npm run test:smoke
        env:
          BASE_URL: https://leuchtturm-flaschenpost.netlify.app

      - name: Run post-deployment health checks
        run: |
          # Check critical endpoints
          curl -f https://leuchtturm-flaschenpost.netlify.app/api/health
          curl -f https://leuchtturm-flaschenpost.netlify.app/api/status

      - name: Update monitoring dashboards
        run: |
          # Update deployment markers in monitoring tools
          curl -X POST "${{ secrets.MONITORING_WEBHOOK_URL }}" \
            -H "Authorization: Bearer ${{ secrets.MONITORING_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "event": "deployment",
              "version": "${{ github.sha }}",
              "environment": "production",
              "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"
            }'

      - name: Notify successful deployment
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          text: '🚀 Production deployment successful!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify failed deployment
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: failure
          text: '❌ Production deployment failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # =============================================================================
  # POST-DEPLOYMENT VALIDATION
  # =============================================================================
  post-deployment:
    name: Post-Deployment Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'release')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run comprehensive health checks
        run: |
          # Check all critical endpoints
          npm run health-check:comprehensive
        env:
          BASE_URL: https://leuchtturm-flaschenpost.netlify.app

      - name: Performance regression testing
        run: |
          # Run performance tests against production
          npm run test:performance
        env:
          BASE_URL: https://leuchtturm-flaschenpost.netlify.app

      - name: Generate deployment report
        run: |
          # Generate deployment summary
          echo "## Deployment Report" > deployment-report.md
          echo "- **Version**: ${{ github.sha }}" >> deployment-report.md
          echo "- **Environment**: Production" >> deployment-report.md
          echo "- **Deployed at**: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> deployment-report.md
          echo "- **Triggered by**: ${{ github.actor }}" >> deployment-report.md

      - name: Update deployment tracking
        run: |
          # Update deployment tracking system
          curl -X POST "${{ secrets.DEPLOYMENT_TRACKER_URL }}" \
            -H "Authorization: Bearer ${{ secrets.DEPLOYMENT_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "deployment_id": "${{ github.run_id }}",
              "version": "${{ github.sha }}",
              "environment": "production",
              "status": "completed",
              "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
              "triggered_by": "${{ github.actor }}"
            }'

  # =============================================================================
  # CLEANUP
  # =============================================================================
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [post-deployment]
    if: always()
    
    steps:
      - name: Cleanup old artifacts
        run: |
          # Cleanup old build artifacts, temporary files, etc.
          echo "Cleaning up temporary resources..."

      - name: Update deployment metrics
        run: |
          # Update deployment success/failure metrics
          echo "Updating deployment metrics..."